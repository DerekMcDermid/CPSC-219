import java.util.*;
import java.io.*;
public final class Town {

    private final Map<Integer, Map<Integer, Room>> map = new HashMap<Integer, Map<Integer, Room>>();
    private Room roomCurrent;
    private int xCurrent = 0;
    private int yCurrent = 0;

    private Town() {
    }

    private void putRoom(int x, int y, Room room) {
        if (!map.containsKey(x)) {
            map.put(x, new HashMap<Integer, Room>());
        }
        map.get(x).put(y, room);
    }

    private Room getRoom(int x, int y) {
        return map.get(x).get(y);
    }

    private boolean roomExists(int x, int y) {
        if (!map.containsKey(x)) {
            return false;
        }
        return map.get(x).containsKey(y);
    }

    private boolean isComplete() {
        return roomCurrent.isBossRoom() && roomCurrent.isComplete();
    }

    public void movePlayer(Player player) throws IOException {
        boolean northPossible = roomExists(xCurrent, yCurrent + 1);
        boolean southPossible = roomExists(xCurrent, yCurrent - 1);
        boolean eastPossible = roomExists(xCurrent + 1, yCurrent);
        boolean westPossible = roomExists(xCurrent - 1, yCurrent);
        System.out.print("What direction are you going?:");
        if (northPossible) {
            System.out.print(" North ('w' key)");
        }
        if (eastPossible) {
            System.out.print(" East ('d' key)");
        }
        if (southPossible) {
            System.out.print(" South ('s' key)");
        }
        if (westPossible) {
            System.out.print(" West ('a' key)");
        }
        System.out.print(" ? ");
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String direction = in.readLine();
        if (direction.equals("w") && northPossible) {
            yCurrent++;
        } else if (direction.equals("s") && southPossible) {
            yCurrent--;
        } else if (direction.equals("d") && eastPossible) {
            xCurrent++;
        } else if (direction.equals("a") && westPossible) {
            xCurrent--;
        }
        roomCurrent = getRoom(xCurrent, yCurrent);
        roomCurrent.enter(player);
    }

    public void startQuest(Player player) throws IOException {
        while (player.isAlive() && !isComplete()) {
            movePlayer(player);
        }
    }

    public static Town newInstance() {
        Town town = new Town();
        town.putRoom(0, 0, Room.newRegularInstance());
        town.putRoom(-1, 1, Room.newRegularInstance());
        town.putRoom(0, 1, Room.newRegularInstance());
        town.putRoom(1, 1, Room.newRegularInstance());
        town.putRoom(-1, 2, Room.newRegularInstance());
        town.putRoom(1, 2, Room.newRegularInstance());
        town.putRoom(-1, 3, Room.newRegularInstance());
        town.putRoom(0, 3, Room.newRegularInstance());
        town.putRoom(1, 3, Room.newRegularInstance());
        town.putRoom(0, 4, Room.newBossInstance());
        town.roomCurrent = town.getRoom(0, 0);
        return town;
    }

}
